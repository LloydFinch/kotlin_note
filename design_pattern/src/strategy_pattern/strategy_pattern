策略模式：
定义一组算法，将每个算法都封装起来，并且使他们之间可以相互转换

角色:
Context: 上下文对象，负责将策略封装，并对外提供执行方法
Strategy: 抽象策略对象，定义统一的执行方法，通常为接口
ConcreteStrategy: 策略实施对象，实现不同策略

策略模式的使用场景：
1 需要对高层屏蔽具体的实现时
2 需要根据不同的场景作出不同的处理时
3 策略枚举,对比工厂方法模式(反射)


自己概括：
将一系列方法(策略、算法)封装到一个实体类里面，这些方法有统一的接口提供对外的操作，然后定义一个盒子，将这些方法放到
这个盒子中去，这个盒子对外提供一个可操作的方法，方法的内部调用的是放进去的方法，操作者只需要持有这个盒子，
调用里面的方法即可，并不知道盒子里面的方法是怎么调用的，并且可以持有不同的盒子从而调用不同的方法
